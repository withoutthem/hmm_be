# =============================================================================
# 목적 (DEV 전용)
#  - FE(React/TS/Vite) → BE(Spring Boot/WebFlux) 순으로 빌드
#  - Vite는 .env.dev 만 사용 (CI VITE_* 주입 없음)
#  - Vite outDir 설정에 따라 backend/src/main/resources/static 으로 FE 산출물 생성
#  - 최종 산출물(app.jar)을 /app/cbuip/was/ 로 배치
#  - 실행 시 SPRING_PROFILES_ACTIVE=dev 로 application-dev.yml 적용
# =============================================================================

stages:
  - fe_build
  - be_build
  - assemble

variables:
  DEV_BRANCH: "develop"

  NODE_IMAGE: "node:22-alpine"
  MAVEN_IMAGE: "maven:3.9-eclipse-temurin-17"

  WAS_OUT_DIR: "/app/cbuip/was"
  BE_JAR_GLOB: "backend/target/*.jar"
  MVN_REPO_LOCAL: ".m2/repository"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - frontend/node_modules/
    - .m2/repository/
  policy: pull-push

# 1) FE 빌드 (npm only / .env.dev 사용)
fe:build:
  stage: fe_build
  image: $NODE_IMAGE
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - "frontend/**"
        - "frontend/.env.dev"
        - "backend/**"               # outDir 대상 경로 변경 감지
        - "ci/dev.gitlab-ci.yml"
        - ".gitlab-ci.yml"
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $DEV_BRANCH'
      when: manual
  before_script:
    - node -v && npm -v
    - cd frontend
    - |
      if [ -f package-lock.json ]; then
        npm ci
      else
        npm install
      fi
  script:
    # Vite 모드 = dev → .env.dev 로딩
    - npm run build:dev
    # FE 산출물이 backend/static 으로 생성됐는지 검증
    - test -d "../backend/src/main/resources/static" || (echo "static 생성 실패"; exit 1)
    - test -f "../backend/src/main/resources/static/index.html" || (echo "index.html 누락"; exit 1)
  artifacts:
    name: "fe-static-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 2 days
    paths:
      - "backend/src/main/resources/static"

# 2) BE 빌드 (FE 산출물 포함하여 JAR 패키징)
be:build:
  stage: be_build
  image: $MAVEN_IMAGE
  needs: ["fe:build"]
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      changes:
        - "backend/**"
        - "ci/dev.gitlab-ci.yml"
        - ".gitlab-ci.yml"
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $DEV_BRANCH'
      when: manual
  before_script:
    - java -version && mvn -v
    - cd backend
  script:
    - mvn -q -DskipTests -Dmaven.repo.local="../$MVN_REPO_LOCAL" clean package || (echo "Maven 빌드 실패"; exit 1)
    - ls -l target
  artifacts:
    name: "be-jar-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 7 days
    paths:
      - "$BE_JAR_GLOB"

# 3) 산출물 정리(개발 번들 배치)
assemble:dev:
  stage: assemble
  image: alpine:3.20
  needs: ["be:build"]
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $DEV_BRANCH'
      when: manual
  before_script:
    - apk add --no-progress bash coreutils
    - mkdir -p "$WAS_OUT_DIR"
  script:
    - rm -f "$WAS_OUT_DIR/app.jar" || true
    - BE_JAR=$(ls $BE_JAR_GLOB | head -n 1)
    - cp "$BE_JAR" "$WAS_OUT_DIR/app.jar"

    # ← 여기! 블록 스칼라(|) 뒤 라인들은 반드시 들여쓰기 유지
    - |
      cat > "$WAS_OUT_DIR/backend.dev.env" <<'ENV'
      SPRING_PROFILES_ACTIVE=dev
      DEV_DB_URL=${DEV_DB_URL}
      DEV_DB_USERNAME=${DEV_DB_USERNAME}
      DEV_DB_PASSWORD=${DEV_DB_PASSWORD}
      ENV

    - echo "JAR 위치: $WAS_OUT_DIR/app.jar"
    - echo "런타임 ENV: $WAS_OUT_DIR/backend.dev.env"
  artifacts:
    name: "was-dev-bundle-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 2 days
    paths:
      - "$WAS_OUT_DIR"