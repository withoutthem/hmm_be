# =============================================================================
# Backend Repository CI/CD Pipeline (.gitlab-ci.yml)
# 목적: FE 아티팩트를 needs:project로 가져와 static에 주입 → Maven 패키징 → 배치
# =============================================================================

#•	목적: FE가 선반에 올린 **dist 박스(아티팩트)**를 **GitLab의 needs:project**로 그대로 가져온 뒤,
#        백엔드의 src/main/resources/static/에 복사하고, Maven 패키징으로 실행 JAR를 만듭니다. 마지막으로 /app/cbuip/was에 **app.jar**와 런타임 env 파일을 배치합니다.

#•	트리거 조건: develop 브랜치에서 변경 시 자동 실행(또는 MR→develop 수동).

#•	전제 조건(중요):
#  1.	FE 프로젝트 경로/잡명/브랜치(ref)를 상수로 정확히 지정해야 함
#•	    project: "YOUR-GROUP/YOUR-FE-REPO"
#•	    job: "build-frontend"
#•	    ref: "develop"
#  2.	FE 파이프라인이 미리 성공해 있어야 하고, 그 결과 frontend/dist/ 아티팩트가 존재해야 함
#  3.	**FE Settings → CI/CD → Job Token 권한(Allowlist)**에 BE 프로젝트를 추가해야 함(멀티레포 아티팩트 접근 허용)

stages: [build, assemble]

variables:
  DEV_BRANCH: "develop"
  MAVEN_IMAGE: "maven:3.9-eclipse-temurin-17"

  # 백엔드 코드 루트 (레포 루트에 pom.xml이면 ""로 두고 아래 _BE_DIR 계산에서 처리)
  BE_ROOT: "backend"

  # --- 멀티 레포 연동(상수로 교체!) ---
  FE_PROJECT_PATH: "YOUR-GROUP/YOUR-FE-REPO"  # ← 예: hmm/partners-frontend
  FE_JOB_NAME: "build-frontend"                # ← FE 잡명(상수)
  FE_REF: "develop"                            # ← FE 브랜치(상수)

  # 산출물/배치
  MVN_REPO_LOCAL: ".m2/repository"
  WAS_OUT_DIR: "/app/cbuip/was"
  BE_JAR_GLOB: "$BE_ROOT/target/*.jar"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .m2/repository/
  policy: pull-push

build-backend:
  stage: build
  image: $MAVEN_IMAGE
  # === 핵심: 멀티 레포 아티팩트 수신(상수!) ===
  needs:
    - project: "YOUR-GROUP/YOUR-FE-REPO"   # ← FE_PROJECT_PATH와 동일한 리터럴
      job: "build-frontend"                 # ← FE_JOB_NAME 리터럴
      ref: "develop"                        # ← FE_REF 리터럴
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $DEV_BRANCH'
      when: manual
  before_script:
    - export _BE_DIR="${BE_ROOT:-.}"
    # needs:project로 받은 FE 아티팩트가 frontend/dist/로 풀려 있음
    - test -d "frontend/dist" || (echo "FE 아티팩트(frontend/dist) 누락"; exit 1)
    - mkdir -p "$_BE_DIR/src/main/resources/static"
    - rm -rf "$_BE_DIR/src/main/resources/static"/*
    - cp -r "frontend/dist/." "$_BE_DIR/src/main/resources/static/"
  script:
    - mvn -q -DskipTests -Dmaven.repo.local="$CI_PROJECT_DIR/$MVN_REPO_LOCAL" -f "$_BE_DIR/pom.xml" clean package
    - ls -l "$_BE_DIR/target"
  artifacts:
    name: "backend-jar-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 7 days
    paths:
      - "$BE_JAR_GLOB"

assemble-dev:
  stage: assemble
  image: alpine:3.20
  needs: ["build-backend"]
  rules:
    - if: '$CI_COMMIT_BRANCH == $DEV_BRANCH'
      when: on_success
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $DEV_BRANCH'
      when: manual
  before_script:
    - apk add --no-progress bash coreutils
    - mkdir -p "$WAS_OUT_DIR" || true
  script:
    # 실행 가능한 JAR 선택(plain/original 제외)
    - |
      BE_JAR=$(find "$BE_ROOT/target" -maxdepth 1 -type f -name "*.jar" ! -name "*-plain.jar" ! -name "original-*.jar" | head -n 1)
      test -n "$BE_JAR" || { echo "실행 JAR 미발견"; exit 1; }
      cp "$BE_JAR" "$WAS_OUT_DIR/app.jar" || echo "[경고] $WAS_OUT_DIR 권한/마운트 미구성(스킵)"
      cat > "$WAS_OUT_DIR/backend.dev.env" <<'ENV'
      SPRING_PROFILES_ACTIVE=dev
      DEV_DB_URL=${DEV_DB_URL}
      DEV_DB_USERNAME=${DEV_DB_USERNAME}
      DEV_DB_PASSWORD=${DEV_DB_PASSWORD}
      ENV
      echo "JAR: $WAS_OUT_DIR/app.jar"
      echo "ENV: $WAS_OUT_DIR/backend.dev.env"
  artifacts:
    name: "was-dev-bundle-$CI_COMMIT_SHORT_SHA"
    when: on_success
    expire_in: 2 days
    paths:
      - "$WAS_OUT_DIR"